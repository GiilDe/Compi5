%{
    #include <iostream>
    #include <utility>
    #include <vector>
    #include <stack>
    #include <map>
    #include <set>
    #include <string>
    #include <algorithm>
    #include <iostream>
    #include <sstream>
    #include <cstdarg>
    #include <list>
    #include "source.hpp"
    #include "output.hpp"
    #include "bp.hpp"
    #include "CodeGenerator.h"

    #define tokens yytokentype
    #define YYERROR_VERBOSE 1

    #define code_buffer wrapper.buf()

    using namespace std;
    using namespace output;

    /**
     * External lexical analyzer function
     */
    extern int yylex();

    /**
     * External parser function
     */
    extern int yyparse();

    extern int yydebug;

    Utils utils;
    Parser parser(utils);
    CodeGenerator wrapper(&parser);

    void yyerror(const char *err) {
        WRAP_ERROR(errorSyn(yylineno));
    }

    int main() {

    //#ifdef YYDEBUG
    //    yydebug = 1;
    //#endif

        return yyparse();
    }
%}

%token            VOID
%token            INT
%token            BYTE
%token            B
%token            BOOL
%left             OR
%left             AND
%right            NOT
%token            TRUE
%token            FALSE
%token            RETURN
%token            IF
%token            ELSE
%token            WHILE
%token            BREAK
%token            CONTINUE
%token            PRECOND
%token            SC
%token            COMMA
%token            LPAREN
%token            RPAREN
%token            LBRACE
%token            RBRACE
%right            ASSIGN
%nonassoc         RELOP
%left             ADD
%left             SUB
%left             MUL
%left             DIV
%token            ID
%token            NUM
%token            STRING
%token            EF

%%

Program	:	Funcs EF
        {
            parser.verifyMainFunction();
            parser.exitLastScope();
            wrapper.printBuffer();
            exit(0);
        }
        ;

Funcs	:	/*epsilon*/
		|	FuncDecl Funcs
	    ;


FuncDecl	:	RetType ID LPAREN {parser.newScope(true);} Formals RPAREN PreConditions LBRACE
            {
                wrapper.newFunction($2, $7);
                parser.setCurrentReturnType($1);
                parser.addFunctionDeclaration($1, $2, $5);
            }
            Statements RBRACE
            {
                parser.exitScope(true, $2, $7);

                if (dynamic_cast<Id*>($2)->id == "main") wrapper.procedureCalleeEndMain();
                else wrapper.procedureCalleeEnd();
            }
	        ;

RetType	:	Type
            { $$ = new Type(static_cast<Type*>($1)->type); }

		|	VOID
		    { $$ = new Type(VOID); }
	    ;

Formals	:	/*epsilon*/
        { $$ = new ArgumentList(); }

		|	FormalsList
		{
            ArgumentList *tl = new ArgumentList();
            vector<Exp*>& params = tl->params;
            vector<Exp*>& params_other = dynamic_cast<ArgumentList*>($1)->params;
            params = params_other;

            $$ = tl;
		}
	    ;

FormalsList	:	FormalDecl
            {
                Exp* arg = dynamic_cast<Exp*>($1);
                ArgumentList* tl = new ArgumentList();
                tl->params.push_back(arg);

                $$ = tl;
            }
			|	FormalDecl COMMA FormalsList
			{
                ArgumentList *tl = new ArgumentList();
                vector<Exp*>& params = tl->params;
                vector<Exp*>& params_other = dynamic_cast<ArgumentList*>($3)->params;
                params.push_back(dynamic_cast<Exp*>($1));
                params.insert(params.end(), params_other.begin(), params_other.end());

                $$ = tl;
			}
			;

FormalDecl	:	Type ID
            {
                parser.tryAddVariable($1, $2, true);
                Id* id = dynamic_cast<Id*>($2);
                Type* t = dynamic_cast<Type*>($1);
                Exp* arg = new Exp(id, t);
                $$ = arg;
	        }
            ;

PreConditions	:	/*epsilon*/
                { $$ = new Preconditions(vector<Exp*>()); }
				|	PreConditions PreCondition
				{
				    vector<Exp*> exps = dynamic_cast<Preconditions*>($1)->preconditionExps;
				    exps.push_back(dynamic_cast<Exp*>($2));
				    $$ = new Preconditions(exps);
				}
	            ;

PreCondition	:	PRECOND LPAREN Exp { parser.verifyType($3, BOOL); } RPAREN
                    {
                        $$ = $3;
                    }
	            ;

Statements	:	Statement
            { $$ = $1; }

			|	Statements Statement
			{
			    Type * t = dynamic_cast<Type*>($1);
			    Type * t1 = dynamic_cast<Type*>($2);
			    if (t != NULL && t1 != NULL) {
			        t->exit_list = code_buffer->merge(t->exit_list, t1->exit_list);
			        $$ = $1;
			    } else if (t1 != NULL) {
			        $$ = $2;
			    } else {
			        $$ = $1;
			    }
			}
	        ;

Statement: Open_statement
         { $$ = $1; }

         | Closed_statement
         { $$ = $1; }
         ;

Open_statement: If_Start M Simple_statement
                {
                    wrapper.doIf($1, $2);
                    parser.exitScope(false, NULL, NULL);
                    $$ = $3;
                }

              | If_Start M Open_statement
                {
                    wrapper.doIf($1, $2);
                    parser.exitScope(false, NULL, NULL);

                    $$ = $3;
                }

              | If_Else Open_statement
                {
                    Type *t = dynamic_cast<Exp*>($1)->type;
                    string exit_label = code_buffer->genLabel();
                    code_buffer->bpatch(t->exit_list, exit_label);
                    parser.exitScope(false, NULL, NULL);

                    $$ = $2;
                }

              | While_Start M Open_statement
                {
                    parser.outWhile();
                    parser.exitScope(false, NULL, NULL);
                    while_start* ws = dynamic_cast<while_start*>($1);
                    string exp_evaluation_label = dynamic_cast<Label*>(ws->v[0])->label;
                    Type* exp = dynamic_cast<Type*>(ws->v[1]);
                    string label_true = dynamic_cast<Label*>($2)->label;
                    code_buffer->bpatch(exp->true_list, label_true);
                    code_buffer->emit("j " + exp_evaluation_label);
                    string after_while = code_buffer->genLabel();
                    code_buffer->bpatch(exp->false_list, after_while);

                    Type *t = dynamic_cast<Type*>($2);
                    if (t != NULL) {
                        code_buffer->bpatch(t->exit_list, after_while);
                    }
                    code_buffer->bpatch(exp->exit_list, after_while);

                    $$ = $2;
                }
              ;

Closed_statement: Simple_statement
                { $$ = $1; }

                | If_Else Closed_statement
                {
                    Type *t = dynamic_cast<Exp*>($1)->type;
                    string exit_label = code_buffer->genLabel();
                    code_buffer->bpatch(t->exit_list, exit_label);
                    parser.exitScope(false, NULL, NULL);

                    $$ = $2;
                }

                | While_Start M Closed_statement
                {
                    parser.outWhile();
                    parser.exitScope(false, NULL, NULL);
                    while_start* ws = dynamic_cast<while_start*>($1);
                    string exp_evaluation_label = dynamic_cast<Label*>(ws->v[0])->label;
                    Type* exp = dynamic_cast<Exp*>(ws->v[1])->type;
                    string label_true = dynamic_cast<Label*>($2)->label;
                    code_buffer->bpatch(exp->true_list, label_true);
                    code_buffer->emit("j " + exp_evaluation_label);
                    string after_while = code_buffer->genLabel();
                    code_buffer->bpatch(exp->false_list, after_while);
                    code_buffer->bpatch(exp->exit_list, after_while);

                    Type *t = dynamic_cast<Type*>($3);
                    if (t != NULL) {
                        code_buffer->bpatch(t->exit_list, after_while);
                    }

                    $$ = $2;
                }
                ;

While_Start: WHILE { parser.inWhile(); } LPAREN M Exp RPAREN
{
    parser.verifyType($5, BOOL);
    parser.newScope(false);
    wrapper.current_while_label = dynamic_cast<Label*>($4)->label;
    while_start* ws = new while_start();
    ws->v.push_back($4);
    ws->v.push_back($5);
    $$ = ws;
}

If_Start: IF LPAREN Exp RPAREN
{
    parser.verifyType($3, BOOL);
    parser.newScope(false);
    $$ = $3;
}

If_Else: If_Start M Closed_statement N {parser.exitScope(false, NULL, NULL);} ELSE { parser.newScope(false); } M
{
    string label_true = dynamic_cast<Label*>($2)->label;
    string label_false = dynamic_cast<Label*>($8)->label;
    Type* if_exp = dynamic_cast<Exp*>($1)->type;
    code_buffer->bpatch(if_exp->true_list, label_true);
    code_buffer->bpatch(if_exp->false_list, label_false);

    int exit_address = dynamic_cast<Num*>($4)->val;
    Type* t = new Type();
    t->exit_list.push_back(exit_address);
    $$ = new Exp(t);
}

Simple_statement:  LBRACE { parser.newScope(false); } Statements RBRACE
                {
                    parser.exitScope(false, NULL, NULL);
                    $$ = $3;
                }

                | Type ID SC
                {
                    parser.tryAddVariable($1, $2, false);
                    wrapper.doAssignOp(NULL, $2, parser.getVariableType($2));
                }

                | Type ID ASSIGN Exp SC
                {
                    Exp* expType = dynamic_cast<Exp*>($4);
                    Type *t1 = dynamic_cast<Type*>($1);
                    parser.verifyType($4, expType->type->type);
                    parser.tryAddVariable($1, $2, false);
                    wrapper.doAssignOp($4, $2, t1->type);
                }

                | ID ASSIGN Exp SC
                {
                    parser.verifyIdType($1, $3);
                    parser.verifyVariableDefined($1);
                    wrapper.doAssignOp($3, $1, parser.getVariableType($1));
                }
                | Call SC

                | RETURN SC
                { wrapper.doReturn(NULL); }

                | RETURN Exp SC
                { wrapper.doReturn($2); }

                | BREAK SC
                {
                    $$ = wrapper.doBreak();
                }

                | CONTINUE SC
                { wrapper.doContinue(); }
                ;

Call	:	ID LPAREN ExpList RPAREN
            {
                parser.verifyFunctionDefined($1);
                Type *funcType = new Type(parser.getFunctionReturnType($1), "$v0");
                Id *funcId = dynamic_cast<Id*>($1);
                parser.verifyRightParams($1, $3);
                Exp* funcExp = new Exp(funcId, funcType);
                wrapper.function_call(funcExp, $3);

                $$ = funcExp;
            }

		|	ID LPAREN RPAREN
		    {
		        parser.verifyFunctionDefined($1);
		        Type *funcType = new Type(parser.getFunctionReturnType($1), "$v0");
                Id *funcId = dynamic_cast<Id*>($1);
                ArgumentList * l = new ArgumentList();
                parser.verifyRightParams($1, l);
                Exp* funcExp = new Exp(funcId, funcType);
                wrapper.function_call(funcExp, l);

                $$ = funcExp;
		    }
	    ;

ExpList	:	Exp
        {
            Exp* exp = dynamic_cast<Exp*>($1);
            vector<Exp*> v;
            v.push_back(exp);
            $$ = new ArgumentList(v);
        }
		|	Exp COMMA ExpList
		{
            vector<Exp*> v1;
            Exp* expData = dynamic_cast<Exp*>($1);
            v1.push_back(expData);
            ArgumentList *tl = new ArgumentList(v1);
            vector<Exp*>& v = tl->params;
            vector<Exp*>& exp = dynamic_cast<ArgumentList*>($3)->params;
            v.insert(v.end(), exp.begin(), exp.end());

            $$ = tl;
		}
	    ;

Type	:	INT
        { $$ = new Type(INT); }

		|	BYTE
		{ $$ = new Type(BYTE); }

		|	BOOL
		{ $$ = new Type(BOOL); }
	    ;

Exp	:	LPAREN Exp RPAREN

    { $$ = $2; }
    |   Exp ADD Exp
    {
            int t1 = parser.verifyTypes($1, 3, NUM, BYTE, INT);
            int t2 = parser.verifyTypes($3, 3, NUM, BYTE, INT);

            // Try NUM precision first, retreat to byte if both are BYTE
            int preciseType = t1 == NUM ? NUM : (t2 == NUM ? NUM : BYTE);

            $$ = wrapper.binop(preciseType, $1, $3, $2);
    }

    |   Exp SUB Exp
    {
            int t1 = parser.verifyTypes($1, 3, NUM, BYTE, INT);
            int t2 = parser.verifyTypes($3, 3, NUM, BYTE, INT);

            // Try NUM precision first, retreat to byte if both are BYTE
            int preciseType = t1 == NUM ? NUM : (t2 == NUM ? NUM : BYTE);

            $$ = wrapper.binop(preciseType, $1, $3, $2);
    }

    |   Exp MUL Exp
    {
            int t1 = parser.verifyTypes($1, 3, NUM, BYTE, INT);
            int t2 = parser.verifyTypes($3, 3, NUM, BYTE, INT);

            // Try NUM precision first, retreat to byte if both are BYTE
            int preciseType = t1 == NUM ? NUM : (t2 == NUM ? NUM : BYTE);

            $$ = wrapper.binop(preciseType, $1, $3, $2);
    }

    |   Exp DIV Exp
    {
            int t1 = parser.verifyTypes($1, 3, NUM, BYTE, INT);
            int t2 = parser.verifyTypes($3, 3, NUM, BYTE, INT);

            // Try NUM precision first, retreat to byte if both are BYTE
            int preciseType = t1 == NUM ? NUM : (t2 == NUM ? NUM : BYTE);

            $$ = wrapper.binop(preciseType, $1, $3, $2);
    }

	|	ID
    {
        parser.verifyVariableDefined($1);
        Id* id = static_cast<Id*>($1);
        $$ = wrapper.assignRegisterToID($1);
        if(parser.getVariableType($1) == BOOL){
            $$ = wrapper.boolId($1);
        }
    }

	|	Call
	{
	    Exp *exp = dynamic_cast<Exp*>($1);
	    if (parser.getFunctionReturnType(exp->id) == BOOL) {
	        $$ = wrapper.boolFunc($1);
	    } else {
            $$ = $1;
	    }
	}

	|	NUM
	{
        int num = dynamic_cast<Num*>($1)->val;
        Type* dest = new Type(NUM, utils.intToString(num));
        $$ = new Exp(dest);
    }

	|	NUM B
	{
	    int num = dynamic_cast<Num*>($1)->val;
        Type* dest = new Type(BYTE, utils.intToString(num));
	    // parser.verifyByteSize($1);
        $$ = new Exp(dest);
	}

	|	STRING
	{ $$ = wrapper.newString(dynamic_cast<Id*>($1)->id); }

	|	TRUE
	{ $$ = wrapper.boolTrue(); }

	|	FALSE
	{ $$ = wrapper.boolFalse(); }

	|	NOT Exp
	{
    	parser.verifyType($2, BOOL);
        $$ = wrapper.boolNot($2);
    }

	|	Exp AND M Exp
	{
	    parser.verifyType($1, BOOL);
	    parser.verifyType($4, BOOL);
        $$ = wrapper.boolAnd($1, $4, $3);
    }

	|	Exp OR M Exp
	{
	    parser.verifyType($1, BOOL);
     	parser.verifyType($4, BOOL);
        $$ = wrapper.boolOr($1, $4, $3);
    }

	|	Exp RELOP Exp
	{
	    parser.verifyTypes($1, 3, NUM, BYTE, INT);
	    parser.verifyTypes($3, 3, NUM, BYTE, INT);
        $$ = wrapper.relop($1, $3, $2);
	}
	;

M   : /*epsilon*/ { $$ = new Label(code_buffer->genLabel()); }
N   : /*epsilon*/ { $$ = new Num(code_buffer->emit("j ")); }


%%
