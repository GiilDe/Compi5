%{
    #include "parser.h"
%}

%token            VOID
%token            INT
%token            BYTE
%token            B
%token            BOOL
%left             OR
%left             AND
%right            NOT
%token            TRUE
%token            FALSE
%token            RETURN
%token            IF
%token            ELSE
%token            WHILE
%token            BREAK
%token            CONTINUE
%token            PRECOND
%token            SC
%token            COMMA
%token            LPAREN
%token            RPAREN
%token            LBRACE
%token            RBRACE
%right            ASSIGN
%nonassoc         RELOP
%left             BINOP
%token            ID
%token            NUM
%token            STRING
%token            EF

%%

Program	:	Funcs EF
        {
         verifyMainFunction();
         exit_last_scope();
         exit(0);
        }
        ;

Funcs	:	/*epsilon*/
        {
         $$ = new PrecondList();
        }
		|	FuncDecl Funcs
		{
		 PrecondList* p = dynamic_cast<PrecondList*>($1);
		 vector<int>& pv = p->preconditions_nums;
         $$ = new PrecondList();
         PrecondList* t = dynamic_cast<PrecondList*>($$);
         vector<int>& tv = t->preconditions_nums;
         tv.insert(tv.end(), pv.begin(), pv.end());
         PrecondList* p2 = dynamic_cast<PrecondList*>($2);
         vector<int>& pv2 = p2->preconditions_nums;
         tv.insert(tv.end(), pv2.begin(), pv2.end());
		}
	    ;


FuncDecl	:	RetType ID LPAREN {new_scope();} Formals RPAREN PreConditions LBRACE {
                current_return_type = dynamic_cast<Type*>($1)->type;
                addFunctionDeclaration($1, $2, $5);
                $$ = $7;
            } Statements RBRACE
            {
                exit_scope(true, $2, $7);
            }
	        ;

RetType	:	Type
            { $$ = new Type(static_cast<Type*>($1)->type); }

		|	VOID
		    { $$ = new Type(VOID); }
	    ;

Formals	:	/*epsilon*/
        { $$ = new TypesList(); }

		|	FormalsList
		{
            $$ = new TypesList();
            vector<int>& params = static_cast<TypesList*>($$)->params;
            vector<int>& params_other = static_cast<TypesList*>($1)->params;
            params = params_other;
		}
	    ;

FormalsList	:	FormalDecl
            {
                $$ = new TypesList();
                Type* t = static_cast<Type*>($1);
                static_cast<TypesList*>($$)->params.push_back(t->type);
            }
			|	FormalDecl COMMA FormalsList
			{
                $$ = new TypesList();
                vector<int>& params = static_cast<TypesList*>($$)->params;
                vector<int>& params_other = static_cast<TypesList*>($3)->params;
                params.push_back(static_cast<Type*>($1)->type);
                params.insert(params.end(), params_other.begin(), params_other.end());
			}
			;

FormalDecl	:	Type ID
            {
                tryAddVariable($1, $2, true);
                $$ = new Type(static_cast<Type*>($1)->type);
	        }
            ;

PreConditions	:	/*epsilon*/
                {$$ = new Preconditions(0);}
				|	PreConditions PreCondition
				{
				 int num = static_cast<Preconditions*>($1)->preconditions_num;
				 $$ = new Preconditions(num + 1);
				}
	            ;

PreCondition	:	PRECOND LPAREN Exp {verifyType($3, BOOL);} RPAREN
                    {$$ = new Preconditions(0);}
	            ;

Statements	:	Statement
            {
                TypesList* t = dynamic_cast<TypesList*>($1);
                if(t != NULL){
                    $$ = new TypesList(t->params);
                }
            }
			|	Statements Statement
                {
                    TypesList* t1 = dynamic_cast<TypesList*>($1);
                    TypesList* t2 = dynamic_cast<TypesList*>($2);
                    if(t1 != NULL || t2 != NULL){
                        $$ = new TypesList();
                        concatenate_params(dynamic_cast<TypesList*>($$)->params, t1, t2);
                    }
                }
	        ;

Statement: Open_statement
           {
                TypesList* t = dynamic_cast<TypesList*>($1);
                if(t != NULL){
                    $$ = new TypesList(t->params);
                }
           }
         | Closed_statement
           {
                TypesList* t = dynamic_cast<TypesList*>($1);
                if(t != NULL){
                    $$ = new TypesList(t->params);
                }
           }
         ;

Open_statement: If_Start Simple_statement
                {
                    TypesList* t = dynamic_cast<TypesList*>($2);
                    if(t != NULL){
                        $$ = new TypesList(t->params);
                    }
                    exit_scope(false, NULL, NULL);
                }

              | If_Start Open_statement
                {
                    TypesList* t = dynamic_cast<TypesList*>($2);
                    if(t != NULL){
                        $$ = new TypesList(t->params);
                    }
                    exit_scope(false, NULL, NULL);
                }

              | If_Else Open_statement
                {
                    TypesList* t1 = dynamic_cast<TypesList*>($1);
                    TypesList* t2 = dynamic_cast<TypesList*>($2);
                    if(t1 != NULL || t2 != NULL){
                        $$ = new TypesList();
                        concatenate_params(dynamic_cast<TypesList*>($$)->params, t1, t2);
                    }
                    exit_scope(false, NULL, NULL);
                }

              | While_Start Open_statement
                {
                    in_while--;
                    TypesList* t = dynamic_cast<TypesList*>($2);
                    if(t != NULL){
                        $$ = new TypesList(t->params);
                    }
                    exit_scope(false, NULL, NULL);
                }
              ;

Closed_statement: Simple_statement
                | If_Else Closed_statement
                  {
                    TypesList* t1 = dynamic_cast<TypesList*>($1);
                    TypesList* t2 = dynamic_cast<TypesList*>($2);
                    if(t1 != NULL || t2 != NULL){
                        $$ = new TypesList();
                        concatenate_params(dynamic_cast<TypesList*>($$)->params, t1, t2);
                    }
                    exit_scope(false, NULL, NULL);
                  }

                | While_Start Closed_statement
                  {
                    in_while--;
                    TypesList* t1 = dynamic_cast<TypesList*>($2);
                    if(t1 != NULL){
                         $$ = new TypesList(t1->params);
                    }
                    exit_scope(false, NULL, NULL);
                  }
                ;

Simple_statement:  LBRACE {new_scope();} Statements RBRACE
                  {
                   TypesList* t = dynamic_cast<TypesList*>($3);
                   if(t != NULL){
                        $$ = new TypesList(t->params);
                   }
                   exit_scope(false, NULL, NULL);
                  }

                | Type ID SC
                  {tryAddVariable($1, $2, false);}

                | Type ID ASSIGN Exp SC
                  {
                    Type *t = dynamic_cast<Type*>($4);
                    verifyType($1, t->type);
                    tryAddVariable($1, $2, false);
                    get_ID_reg($2);
                    Id* id = static_cast<Id*>($2);
                    string dest = id->type.reg;
                    move_data(dest, t->reg);
                  }

                | ID ASSIGN Exp SC
                {
                    verifyIdType($1, $3);
                    verifyVariableDefined($1);
                    get_ID_reg($1);
                    Id* id = static_cast<Id*>($1);
                    string dest = id->type.reg;
                    Type* t = static_cast<Type*>($3);
                    move_data(dest, t->reg);
                }
                | Call SC
                | RETURN SC
                {
                    verifyReturn(VOID);
                    int type = static_cast<int>(VOID);
                    vector<int> v;
                    v.push_back(type);
                    $$ = new TypesList(v);
                }
                | RETURN Exp SC
                {
                    int type = static_cast<Type*>($2)->type;
                    verifyReturn(type);
                    vector<int> v;
                    v.push_back(type);
                    $$ = new TypesList(v);
                }
                | BREAK SC
                {
                    verifyBreak();
                    $$ = new Type(static_cast<int>(VOID));
                }

                | CONTINUE SC
                { verifyContinue(); }

                ;

Call	:	ID LPAREN ExpList RPAREN
            {
                verifyFunctionDefined($1);
                $$ = new Type(getFunctionReturnType($1));
                verifyRightParams($1, $3);
            }

		|	ID LPAREN RPAREN
		    {
		        verifyFunctionDefined($1);
		        $$ = new Type(getFunctionReturnType($1));
		        TypesList* empty = new TypesList();
                verifyRightParams($1, empty);
		    }
	    ;

ExpList	:	Exp
        {
            int type = static_cast<Type*>($1)->type;
            vector<int> v;
            v.push_back(type);
            $$ = new TypesList(v);
        }
		|	Exp COMMA ExpList
		{
            int type = static_cast<Type*>($1)->type;
            vector<int> v1;
            v1.push_back(type);
            $$ = new TypesList(v1);
            vector<int>& v = static_cast<TypesList*>($$)->params;
            vector<int>& exp = static_cast<TypesList*>($3)->params;
            v.insert(v.end(), exp.begin(), exp.end());
		}
	    ;

Type	:	INT
        { $$ = new Type(INT); }

		|	BYTE
		{ $$ = new Type(BYTE); }

		|	BOOL
		{ $$ = new Type(BOOL); }
	    ;

Exp	:	LPAREN Exp RPAREN
    { $$ = new Type(static_cast<Type*>($2)->type); }

	|	Exp BINOP Exp
	{
        int t1 = verifyTypes($1, 3, NUM, BYTE, INT);
        int t2 = verifyTypes($3, 3, NUM, BYTE, INT);

        // Try NUM precision first, retreat to byte if both are BYTE
        int preciseType = t1 == NUM ? NUM : (t2 == NUM ? NUM : BYTE);
        $$ = new Type(preciseType);

        Type* dest = static_cast<Type*>($$);
        Type* Rsrc = static_cast<Type*>($1);
        Type* src = static_cast<Type*>($3);
        dest->reg = get_free_register();
        string binops = static_cast<Binop*>($2)->op;
        binop(dest, Rsrc, src, binops);
    }

	|	ID
    {
        verifyVariableDefined($1);
        Id* id = static_cast<Id*>($1);
        get_ID_reg($1);
        $$ = new Type(getVariableType($1), id->type.reg);
    }

	|	Call
	{ $$ = $1; }

	|	NUM
	{
      $$ = new Type(NUM);
      int num = dynamic_cast<Num*>($1)->val;
      Type* dest = static_cast<Type*>($$);
      dest->reg = int_to_string(num);
    }

	|	NUM B
	{
	    verifyByteSize($1);
	    $$ = new Type(BYTE);
	}

	|	STRING
	{ $$ = new Type(STRING); }

	|	TRUE
	{ $$ = new Type(BOOL); }

	|	FALSE
	{ $$ = new Type(BOOL); }

	|	NOT Exp
	{
    	verifyType($2, BOOL);
        $$ = new Type(BOOL);
    }
	|	Exp AND Exp
	{
	    verifyType($1, BOOL);
	    verifyType($3, BOOL);
        $$ = new Type(BOOL);
    }
	|	Exp OR Exp
	{
	    verifyType($1, BOOL);
     	verifyType($3, BOOL);
        $$ = new Type(BOOL);
    }
	|	Exp RELOP Exp
	{
	    verifyTypes($1, 3, NUM, BYTE, INT);
	    verifyTypes($3, 3, NUM, BYTE, INT);
	    $$ = new Type(BOOL);
	}
	;


If_Start: IF LPAREN Exp RPAREN {verifyType($3, BOOL); new_scope();}

If_Else: If_Start Closed_statement {exit_scope(false, NULL, NULL);} ELSE {new_scope();}
{ $$ = $2; }

While_Start: WHILE {in_while++;} LPAREN Exp RPAREN {verifyType($4, BOOL); new_scope();}

%%
