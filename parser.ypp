%{
    #include "parser.h"
%}

%token            VOID
%token            INT
%token            BYTE
%token            B
%token            BOOL
%left             OR
%left             AND
%right            NOT
%token            TRUE
%token            FALSE
%token            RETURN
%token            IF
%token            ELSE
%token            WHILE
%token            BREAK
%token            CONTINUE
%token            PRECOND
%token            SC
%token            COMMA
%token            LPAREN
%token            RPAREN
%token            LBRACE
%token            RBRACE
%right            ASSIGN
%nonassoc         RELOP
%left             BINOP
%token            ID
%token            NUM
%token            STRING
%token            EF

%%

Program	:	Funcs EF { deriveProgramAndExit(); }
        ;

Funcs	:	/*epsilon*/
		|	FuncDecl Funcs
	    ;


FuncDecl	:	RetType ID LPAREN
            {
                parser.newScope(true);
                wrapper.newFunction($2);

            } Formals RPAREN PreConditions LBRACE
            {
                parser.setCurrentReturnType($1);
                parser.addFunctionDeclaration($1, $2, $5);
            }
            Statements RBRACE
            {
                parser.exitScope(true, $2, $7);
                wrapper.procedureCalleeEnd();
            }
	        ;

RetType	:	Type
            { $$ = new Type(static_cast<Type*>($1)->type); }

		|	VOID
		    { $$ = new Type(VOID); }
	    ;

Formals	:	/*epsilon*/
        { $$ = new ArgumentList(); }

		|	FormalsList
		{
            ArgumentList *tl = new ArgumentList();
            vector<Argument*>& params = tl->params;
            vector<Argument*>& params_other = dynamic_cast<ArgumentList*>($1)->params;
            params = params_other;

            $$ = tl;
		}
	    ;

FormalsList	:	FormalDecl
            {
                Argument* arg = static_cast<Argument*>($1);
                ArgumentList* tl = new ArgumentList();
                tl->params.push_back(arg);

                $$ = tl;
            }
			|	FormalDecl COMMA FormalsList
			{
                ArgumentList *tl = new ArgumentList();
                vector<Argument*>& params = tl->params;
                vector<Argument*>& params_other = dynamic_cast<ArgumentList*>($3)->params;
                params.push_back(dynamic_cast<Argument*>($1));
                params.insert(params.end(), params_other.begin(), params_other.end());

                $$ = tl;
			}
			;

FormalDecl	:	Type ID
            {
                parser.tryAddVariable($1, $2, true);
                Id* id = dynamic_cast<Id*>($2);
                Type* t = dynamic_cast<Type*>($1);
                Argument* arg = new Argument(id->id, t->type);
                $$ = arg;
	        }
            ;

PreConditions	:	/*epsilon*/
                { $$ = new Preconditions(0); }
				|	PreConditions PreCondition
				{
				    int num = static_cast<Preconditions*>($1)->preconditions_num;
				    $$ = new Preconditions(num + 1);
				}
	            ;

PreCondition	:	PRECOND LPAREN Exp {parser.verifyType($3, BOOL);} RPAREN
                    {$$ = new Preconditions(0);}
	            ;

Statements	:	Statement
			|	Statements Statement
	        ;

Statement: Open_statement
         | Closed_statement
         ;

Open_statement: If_Start M Simple_statement
                {
                    string after_if_label = code_buffer->genLabel();
                    string label_true = dynamic_cast<Label*>($2)->label;
                    Type* t = dynamic_cast<Type*>($1);
                    code_buffer->bpatch(t->true_list, label_true);
                    code_buffer->bpatch(t->false_list, after_if_label);
                    parser.exitScope(false, NULL, NULL);
                }

              | If_Start M Open_statement
                {
                    string after_if_label = code_buffer->genLabel();
                    string label_true = dynamic_cast<Label*>($2)->label;
                    Type* t = dynamic_cast<Type*>($1);
                    code_buffer->bpatch(t->true_list, label_true);
                    code_buffer->bpatch(t->false_list, after_if_label);
                    parser.exitScope(false, NULL, NULL);
                }

              | If_Else Open_statement
                {
                    Type *t = dynamic_cast<Type*>($1);
                    string exit_label = code_buffer->genLabel();
                    code_buffer->bpatch(t->exit_list, exit_label);
                    parser.exitScope(false, NULL, NULL);
                }

              | While_Start Open_statement
                {
                    parser.outWhile();
                    parser.exitScope(false, NULL, NULL);
                    while_start* ws = dynamic_cast<while_start*>($1);
                    string exp_evaluation_label = dynamic_cast<Label*>(ws->v[0])->label;
                    Type* exp = dynamic_cast<Type*>(ws->v[1]);
                    string label_true = dynamic_cast<Label*>($2)->label;
                    code_buffer->bpatch(exp->true_list, label_true);
                    code_buffer->emit("j " + exp_evaluation_label);
                    string after_while = code_buffer->genLabel();
                    code_buffer->bpatch(exp->false_list, after_while);
                }
              ;

Closed_statement: Simple_statement
                | If_Else Closed_statement
                {
                    Type *t = dynamic_cast<Type*>($1);
                    string exit_label = code_buffer->genLabel();
                    code_buffer->bpatch(t->exit_list, exit_label);
                    parser.exitScope(false, NULL, NULL);
                }

                | While_Start M Closed_statement
                {
                    parser.outWhile();
                    parser.exitScope(false, NULL, NULL);
                    while_start* ws = dynamic_cast<while_start*>($1);
                    string exp_evaluation_label = dynamic_cast<Label*>(ws->v[0])->label;
                    Type* exp = dynamic_cast<Type*>(ws->v[1]);
                    string label_true = dynamic_cast<Label*>($2)->label;
                    code_buffer->bpatch(exp->true_list, label_true);
                    code_buffer->emit("j " + exp_evaluation_label);
                    string after_while = code_buffer->genLabel();
                    code_buffer->bpatch(exp->false_list, after_while);
                }
                ;

While_Start: WHILE { parser.inWhile(); } LPAREN M Exp RPAREN
{
    parser.verifyType($5, BOOL);
    parser.newScope(false);
    while_start* ws = new while_start();
    ws->v.push_back($4);
    ws->v.push_back($5);
    $$ = ws;
}

If_Start: IF LPAREN Exp RPAREN
{
    parser.verifyType($3, BOOL);
    parser.newScope(false);
    $$ = $3;
}

If_Else: If_Start M Closed_statement N {parser.exitScope(false, NULL, NULL);} ELSE { parser.newScope(false); } M
{
    string label_true = dynamic_cast<Label*>($2)->label;
    string label_false = dynamic_cast<Label*>($8)->label;
    Type* if_exp = dynamic_cast<Type*>($1);
    code_buffer->bpatch(if_exp->true_list, label_true);
    code_buffer->bpatch(if_exp->false_list, label_false);

    int exit_address = dynamic_cast<Num*>($4)->val;
    $$ = new Type();
    Type* t = dynamic_cast<Type*>($$);
    t->exit_list.push_back(exit_address);
}

Simple_statement:  LBRACE { parser.newScope(false); } Statements RBRACE
                { parser.exitScope(false, NULL, NULL); }

                | Type ID SC
                {
                    parser.tryAddVariable($1, $2, false);
                }

                | Type ID ASSIGN Exp SC
                {
                    Type* expType = dynamic_cast<Type*>($4);
                    Type *t1 = dynamic_cast<Type*>($1);
                    parser.verifyType($1, expType->type);
                    parser.tryAddVariable($1, $2, false);
                    wrapper.doAssignOp($4, $2, t1->type);
                }

                | ID ASSIGN Exp SC
                {
                    parser.verifyIdType($1, $3);
                    parser.verifyVariableDefined($1);
                    wrapper.doAssignOp($3, $1, parser.getVariableType($1));
                }
                | Call SC

                | RETURN SC
                {
                    parser.verifyReturn(VOID);
                    int type = static_cast<int>(VOID);
                }

                | RETURN Exp SC
                {
                    int type = static_cast<Type*>($2)->type;
                    parser.verifyReturn(type);

                }

                | BREAK SC
                {
                    parser.verifyBreak();
                    $$ = new Type(static_cast<int>(VOID));
                }

                | CONTINUE SC
                { parser.verifyContinue(); }
                ;

Call	:	ID LPAREN ExpList RPAREN
            {
                parser.verifyFunctionDefined($1);
                $$ = new Type(parser.getFunctionReturnType($1));
                parser.verifyRightParams($1, $3);
                string id = dynamic_cast<Id*>($1)->id;
                wrapper.function_call(id, $3)
            }

		|	ID LPAREN RPAREN
		    {
		        parser.verifyFunctionDefined($1);
		        $$ = new Type(parser.getFunctionReturnType($1));
                parser.verifyRightParams($1, new ArgumentList());
		    }
	    ;

ExpList	:	Exp
        {
            int type = static_cast<Type*>($1)->type;
            vector<Argument*> v;
            v.push_back(new Argument("", type));
            $$ = new ArgumentList(v);
        }
		|	Exp COMMA ExpList
		{
            vector<Argument*> v1;
            int type = static_cast<Type*>($1)->type;
            v1.push_back(new Argument(NULL, type));
            ArgumentList *tl = new ArgumentList(v1);
            vector<Argument*>& v = tl->params;
            vector<Argument*>& exp = dynamic_cast<ArgumentList*>($3)->params;
            v.insert(v.end(), exp.begin(), exp.end());

            $$ = tl
		}
	    ;

Type	:	INT
        { $$ = new Type(INT); }

		|	BYTE
		{ $$ = new Type(BYTE); }

		|	BOOL
		{ $$ = new Type(BOOL); }
	    ;

Exp	:	LPAREN Exp RPAREN
    { $$ = $2 }

	|	Exp BINOP Exp
	{
        int t1 = parser.verifyTypes($1, 3, NUM, BYTE, INT);
        int t2 = parser.verifyTypes($3, 3, NUM, BYTE, INT);

        // Try NUM precision first, retreat to byte if both are BYTE
        int preciseType = t1 == NUM ? NUM : (t2 == NUM ? NUM : BYTE);

        $$ = wrapper.binop(preciseType, $1, $3, $2);
    }

	|	ID
    {
        parser.verifyVariableDefined($1);
        Id* id = static_cast<Id*>($1);
        $$ = wrapper.assignRegisterToID($1);
    }

	|	Call
	{ $$ = $1; }

	|	NUM
	{
        int num = dynamic_cast<Num*>($1)->val;
        Type* dest = new Type(NUM, utils.intToString(num));
        $$ = dest;
    }

	|	NUM B
	{
	    parser.verifyByteSize($1);
	    $$ = new Type(BYTE);
	}

	|	STRING
	{ $$ = wrapper.newString(dynamic_cast<Id*>($1)->id); }

	|	TRUE
	{ $$ = wrapper.boolTrue(); }

	|	FALSE
	{ $$ = wrapper.boolFalse(); }

	|	NOT Exp
	{
    	parser.verifyType($2, BOOL);
        $$ = wrapper.boolNot($2);
    }

	|	Exp AND M Exp
	{
	    parser.verifyType($1, BOOL);
	    parser.verifyType($4, BOOL);
        $$ = wrapper.boolAnd($1, $4, $3);
    }

	|	Exp OR M Exp
	{
	    parser.verifyType($1, BOOL);
     	parser.verifyType($4, BOOL);
        $$ = wrapper.boolOr($1, $4, $3);
    }

	|	Exp RELOP Exp
	{
	    parser.verifyTypes($1, 3, NUM, BYTE, INT);
	    parser.verifyTypes($3, 3, NUM, BYTE, INT);
        $$ = wrapper.relop($1, $3, $2);
	}
	;

M   : /*epsilon*/ { $$ = new Label(code_buffer->genLabel()); }
N   : /*epsilon*/ { $$ = new Num(code_buffer->emit("j ")); }


%%
